class GameTree:
    def __init__(self, value, children=None):
        self.value = value
        self.children = children if children else []
def alpha_beta_pruning(node, alpha, beta, maximizing_player, path=[], pruned_nodes=[]):
    if not node.children:  
        return node.value, path + [node.value], pruned_nodes
    if maximizing_player:
        max_eval = float('-inf')
        best_path = []
        for child in node.children:
            eval_val, child_path, child_pruned = alpha_beta_pruning(child, alpha, beta, False, path + [node.value], pruned_nodes)
            if eval_val > max_eval:
                max_eval = eval_val
                best_path = child_path
            alpha = max(alpha, eval_val)
            if beta <= alpha: 
                pruned_nodes.append(child) 
                break
        return max_eval, best_path, pruned_nodes
    else:
        min_eval = float('inf')
        best_path = []
        for child in node.children:
            eval_val, child_path, child_pruned = alpha_beta_pruning(child, alpha, beta, True, path + [node.value], pruned_nodes)
            if eval_val < min_eval:
                min_eval = eval_val
                best_path = child_path
            beta = min(beta, eval_val)
            if beta <= alpha: 
                pruned_nodes.append(child) 
                break
        return min_eval, best_path, pruned_nodes
leaf_nodes = [
    GameTree(5), GameTree(-1), GameTree(4),
    GameTree(3), GameTree(-2), GameTree(-5),
    GameTree(9), GameTree(8), 
    GameTree(6), GameTree(1), GameTree(-4), 
    GameTree(2), GameTree(4), GameTree(7), GameTree(3), GameTree(-3)
]
mid_level_nodes = [
    GameTree(-1, [leaf_nodes[0], leaf_nodes[1]]),    
    GameTree(3, [leaf_nodes[2], leaf_nodes[3]]),    
    GameTree(-5, [leaf_nodes[4], leaf_nodes[5]]),    
    GameTree(8, [leaf_nodes[6], leaf_nodes[7]]),    
    GameTree(1, [leaf_nodes[8], leaf_nodes[9]]),   
    GameTree(-4, [leaf_nodes[10], leaf_nodes[11]]),  
    GameTree(4, [leaf_nodes[12], leaf_nodes[13]]), 
    GameTree(-3, [leaf_nodes[14], leaf_nodes[15]])  
]
upper_level_nodes = [
    GameTree(3, [mid_level_nodes[0], mid_level_nodes[1]]),
    GameTree(8, [mid_level_nodes[2], mid_level_nodes[3]]),
    GameTree(1, [mid_level_nodes[4], mid_level_nodes[5]]),
    GameTree(4, [mid_level_nodes[6], mid_level_nodes[7]])
]
root = GameTree(3, [
    GameTree(3, [upper_level_nodes[0], upper_level_nodes[1]]),
    GameTree(1, [upper_level_nodes[2], upper_level_nodes[3]])
])
optimal_value, optimal_path, pruned_nodes = alpha_beta_pruning(root, float('-inf'), float('inf'), True)
print("Optimal Value:", optimal_value)
print("Optimal Path:", optimal_path)
if pruned_nodes:
    print("Pruned Nodes:")
    for node in pruned_nodes:
        print(node.value)
else:
    print("No nodes were pruned.")
